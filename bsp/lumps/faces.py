import struct

from source.positioning import Vector

from ..globals import *

def LUMP_Face(lump) -> bytes:
    body = b''
    if len(lump.data) > MAX_MAP_FACES:
        raise OverflowError("too many faces: {len(lump.data)} > {MAX_MAP_FACES}")
    for face in lump.data:
        body += struct.pack('S', face['planenum'])
        body += struct.pack('b', face['side'])
        body += struct.pack('b', face['onnode'])
        body += struct.pack('i', face['firstedge'])
        body += struct.pack('s', face['numedges'])
        body += struct.pack('s', face['texinfo'])
        body += struct.pack('s', face['dispinfo'])
        body += struct.pack('s', 0)  # ?
        body += struct.pack('b', face['styles'])
        body += struct.pack('i', 0)  # generated by vrad
        body += struct.pack('f', face['area'])
        body += struct.pack('i', 0)  # generated by vrad
        body += struct.pack('i', 0)  # generated by vrad
        body += struct.pack('i', face['origface'])
        body += struct.pack('S', face['numprims'])
        body += struct.pack('S', face['firstprim'])
        body += struct.pack('I', 0)  # generated by vrad
    return body
